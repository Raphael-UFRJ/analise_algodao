# -*- coding: utf-8 -*-
"""
# **An√°lise de Algod√£o no Brasil üåæ**
# **MAI712** - Fundamentos em Ci√™ncia de Dados
___
#### **Professores:** Sergio Serra e Jorge Zavaleta
___
#### **Desenvolvedor** Raphael Mauricio Sanches de Jesus
___
### **OBJETIVO:**
Este projeto busca realizar uma an√°lise detalhada de dados hist√≥ricos de plantio de algod√£o e vari√°veis clim√°ticas no Brasil, com o objetivo de responder √†s seguintes perguntas-chave:

1. Quais s√£o os melhores per√≠odos para o plantio do algod√£o?
2. Quais regi√µes apresentam maior potencial para o cultivo?
3. Como as vari√°veis clim√°ticas influenciam a √°rea plantada?

#### **Requisito:**
√â necess√°rio instalar as depend√™ncias listadas no arquivo `requirements.txt` antes de executar as an√°lises e a aplica√ß√£o Streamlit.

#### **Estrutura do C√≥digo**

O c√≥digo est√° organizado para permitir a reutiliza√ß√£o de componentes e a manuten√ß√£o clara do pipeline de an√°lise:

- `data_cleaning.py`: Limpeza e pr√©-processamento dos dados de algod√£o e clim√°ticos.
- `analysis.py`: Fun√ß√µes para an√°lise estat√≠stica e modelagem preditiva.
- `visualization.py`: Visualiza√ß√£o de dados por meio de gr√°ficos e mapas interativos.
- `app.py`: Aplica√ß√£o Streamlit para a intera√ß√£o e visualiza√ß√£o dos resultados.
- `requirements.txt`: Depend√™ncias do projeto.
- `Dockerfile`: Configura√ß√£o para execu√ß√£o do projeto em um ambiente Docker.

#### **Imports e Bibliotecas**

Aqui est√£o as principais bibliotecas utilizadas no projeto:

* [prov](https://pypi.org/project/prov/)
* [pandas](https://pandas.pydata.org/docs/) - Manipula√ß√£o e an√°lise de dados.
* [numpy](https://numpy.org/doc/) - Opera√ß√µes num√©ricas.
* [matplotlib](https://matplotlib.org/stable/index.html) e [seaborn](https://seaborn.pydata.org/) - Cria√ß√£o de gr√°ficos.
* [streamlit](https://streamlit.io/) - Interface interativa para o projeto.
* [geopandas](https://geopandas.org/en/stable/) e [folium](https://python-visualization.github.io/folium/) - Visualiza√ß√£o geogr√°fica.
* [scikit-learn](https://scikit-learn.org/stable/) - Modelos de aprendizado de m√°quina para previs√µes.

___
"""
import os
from prov.model import ProvDocument
from prov.dot import prov_to_dot
from unidecode import unidecode
import datetime


def sanitize_label(label):
    """
    Remove caracteres especiais de uma string para evitar problemas com o pydot.
    """
    return unidecode(label.replace("\n", " ").replace("\r", " "))


def create_agents(d1):
    """
    Cria os agentes respons√°veis pelo projeto no documento PROV.
    """
    agents = {}
    agents["ufrj"] = d1.agent(
        "ufrj:UFRJ",
        {
            "prov:type": "prov:Organization",
            "foaf:name": sanitize_label("Universidade Federal do Rio de Janeiro"),
        },
    )
    agents["ppgi"] = d1.agent(
        "ufrj:PPGI",
        {
            "prov:type": "prov:Organization",
            "foaf:name": sanitize_label("Programa de P√≥s-Gradua√ß√£o em Inform√°tica"),
        },
    )
    agents["mai712"] = d1.agent(
        "ufrj:MAI712",
        {
            "prov:type": "prov:Organization",
            "foaf:name": sanitize_label(
                "Disciplina de Fundamentos de Ci√™ncia de Dados"
            ),
        },
    )
    agents["developer"] = d1.agent(
        "ufrj:Raphael",
        {
            "prov:type": "prov:Person",
            "foaf:name": sanitize_label("Raphael Mauricio Sanches de Jesus"),
            "foaf:mbox": "raphael.mauricio@gmail.com",
        },
    )
    agents["script"] = d1.agent(
        "ufrj:getProv.py",
        {"prov:type": "prov:SoftwareAgent", "foaf:name": "getProv.py"},
    )

    # Relacionando os agentes
    agents["ppgi"].actedOnBehalfOf(agents["ufrj"])
    agents["mai712"].actedOnBehalfOf(agents["ppgi"])
    agents["developer"].actedOnBehalfOf(agents["mai712"])
    agents["script"].actedOnBehalfOf(agents["developer"])

    return agents


def generate_prov_document(nome_arquivo):
    """
    Gera o documento PROV com todas as entidades, atividades e agentes envolvidos.
    """
    d1 = ProvDocument()
    d1.add_namespace("ufrj", "https://www.ufrj.br")
    d1.add_namespace("foaf", "http://xmlns.com/foaf/0.1/")

    agents = create_agents(d1)
    entities = {}
    activities = {}

    # Entidades (datasets)
    entities["cotton_data"] = d1.entity(
        "ufrj:dados-algodao",
        {
            "prov:label": sanitize_label("Dataset hist√≥rico de algod√£o"),
            "prov:type": "foaf:Document",
            "prov:location": "data/raw/AlgodoSerieHist.xlsx",
        },
    )
    entities["weather_data"] = d1.entity(
        "ufrj:dados-clima",
        {
            "prov:label": sanitize_label("Dataset de vari√°veis clim√°ticas"),
            "prov:type": "foaf:Document",
            "prov:location": "data/raw/weather_sum_all.csv",
        },
    )

    # Atividade de processamento
    activities["process_data"] = d1.activity(
        "ufrj:processamento-dados", startTime=datetime.datetime.now()
    )
    d1.used(activities["process_data"], entities["cotton_data"])
    d1.used(activities["process_data"], entities["weather_data"])

    # Entidades de resultados processados
    results = {
        "seasonal_trends": "Tend√™ncias sazonais",
        "regional_potential": "Potencial regional",
        "climatic_influences": "Influ√™ncias clim√°ticas",
        "historical_trends": "Tend√™ncias hist√≥ricas",
        "predicted_areas": "√Åreas previstas",
    }

    for key, label in results.items():
        entities[key] = d1.entity(
            f"ufrj:{key}",
            {"prov:label": sanitize_label(label), "prov:type": "prov:Entity"},
        )
        d1.wasGeneratedBy(entities[key], activities["process_data"])

    # Atividade de visualiza√ß√£o
    activities["visualization"] = d1.activity(
        "ufrj:visualizacao", startTime=datetime.datetime.now()
    )
    d1.used(activities["visualization"], entities["cotton_data"])

    # Resultado da visualiza√ß√£o
    entities["visualization_output"] = d1.entity(
        "ufrj:visualizacao-output",
        {
            "prov:label": sanitize_label("Resultado da visualiza√ß√£o"),
            "prov:type": "prov:Entity",
        },
    )
    d1.wasGeneratedBy(entities["visualization_output"], activities["visualization"])

    # Associa√ß√µes
    d1.wasAssociatedWith(activities["process_data"], agents["developer"])
    d1.wasAssociatedWith(activities["process_data"], agents["script"])
    d1.wasAssociatedWith(activities["visualization"], agents["developer"])

    # Salvar gr√°fico PROV
    img_dir = "assets/img"
    os.makedirs(img_dir, exist_ok=True)
    output_path = os.path.join(img_dir, f"{nome_arquivo}.jpg")
    dot = prov_to_dot(d1)
    dot.write_jpg(output_path)

    return output_path


if __name__ == "__main__":
    prov_image_path = generate_prov_document("analise_algodao")
    print(f"Arquivo PROV gerado: {prov_image_path}")
